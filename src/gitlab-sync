#!/usr/bin/env python3

"""This script is used to sync gitlab group to another gitlab"""

import logging
import os
import sys

import git
import tempfile

from common.init_argparse import parse_sys_args
from common.init_logging import init_logging
from common.git_repo import GitRepo
from common.gitlab_wrapper import GitlabWrapper

IGNORE_BRANCHES = ["cherry-pick"]

def sync(args):
    local_group = args.local_group
    local_gl = GitlabWrapper(args.local, args.local_token)

    remote_group = args.remote_group
    remote_gl = GitlabWrapper(args.remote, args.remote_token)

    if not local_gl.is_group_exists(local_group):
        raise Exception(
            "Can not find local group name %s, "
            "avaliabe group names are: %s" % (
                local_group, local_gl.group_names()))

    remote_gl = GitlabWrapper(args.remote, args.remote_token)
    if not remote_gl.is_group_exists(remote_group):
        raise Exception(
            "Can not find remote group name %s, "
            "avaliabe group names are: %s" % (
                remote_group, remote_gl.group_names()))

    #with tempfile.TemporaryDirectory() as tmpdirname:
    tmpdirname = tempfile.mkdtemp()
    local_projects = local_gl.group_projects(local_group)

    # If no remote projects we need to create
    remote_group_projects = remote_gl.group_project_names(
        remote_group)
    logging.debug("Remote group %s projects %s" % (
        remote_group, remote_group_projects))

    # Get all local projects in group, pull code from
    # all branches, then push to remote
    for p in local_projects:
        project_name = p.name
        git_url = p.ssh_url_to_repo
        local_namespace = p.namespace["full_path"]
        remote_namespace = _get_remote_namespace(
            local_namespace, remote_group)
        remote_url = os.path.join(
            args.push_url, remote_namespace, project_name)
        src_path = os.path.join(
            tmpdirname, local_namespace, project_name)

        if not os.path.exists(src_path):
            os.makedirs(src_path)

        # Download specific repo with all branches
        logging.info("Run git clone %s to %s" % (
            git_url, src_path))
        local_repo = GitRepo(git_url, src_path)
        local_repo.clone()
        for branch in local_repo.branches:
            if _is_ignore_branch(branch):
                logging.info("Found ignore branch %s, skip to pull" % branch)
                continue
            if not branch == local_repo.current_branch:
                logging.info("Pulling branch %s..." % branch)
                local_repo.pull_branch(branch)

        # Make sure groups and projects are created in remote gitlab
        remote_gl.ensure_project_exists(
            remote_namespace, project_name)

        # Push all branches and tags to remote
        logging.info("Run git push to %s..." % remote_url)
        remote_repo = GitRepo(remote_url, src_path)
        remote_repo.push_all_branches()
        remote_repo.push_all_tags()

def _is_ignore_branch(branch_name):
    """Return True if branch need to be ignore"""
    for ib in IGNORE_BRANCHES:
        if ib in branch_name:
            return True
    return False

def _get_remote_namespace(local_namespace, remote_group):
    """Replace the first group name with remote group"""
    namespaces = local_namespace.split("/")
    namespaces[0] = remote_group
    return "/".join(namespaces)

def main():
    args = parse_sys_args(sys.argv)
    init_logging(verbose=args.verbose, debug=args.debug)

    sync(args)

if __name__ == "__main__":
    main()
